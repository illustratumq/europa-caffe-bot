import os
import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message, InputFile

from app.config import Config
from app.keyboards.inline.admin import bool_kb
from app.keyboards.reply.admin import barista_kb
from app.keyboards.reply.menu import menu_kb
from app.misc.buttons import Buttons
from app.misc.enums import UserPermEnum
from app.misc.utils import generate_qrcode
from app.services.repos import UserRepo, CaffeRepo

BARISTA_REGEX = re.compile('change_my_permission')


async def start_cmd(msg: Message, user_db: UserRepo, state: FSMContext, caffe_db: CaffeRepo, config: Config):
    user = await user_db.get_user(msg.from_user.id)
    if user is None and not msg.from_user.is_bot:
        user = await user_db.add(
            user_id=msg.from_user.id,
            full_name=msg.from_user.full_name,
            mention=msg.from_user.get_mention()
        )
    if user.permission == UserPermEnum.ROOT:  # and user.user_id != config.bot.admin_ids[-1]
        text = (
            '‚òï –ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è—á–∫–∞!\n\n'
            '–í–∏ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –±–∞—Ä–∏—Å—Ç–∏! –î–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–∏—Å–∞–Ω–Ω—è —Ñ—ñ—à–æ –∫ '
            '–≤—ñ–¥—Å–∫–∞–Ω—É–π—Ç–µ QR-–∫–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ –±—É–¥—å —è–∫–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ '
            '–ø—ñ—Å–ª—è —á–æ–≥–æ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start.\n\n'
            '–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –∫–æ–º–∞–Ω–¥–∞ "—Å—Ç–∞—Ä—Ç" —è–∫—É –≤–∏ —Ç–∏—Å–Ω–∏—Ç–µ –ø—ñ—Å–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –º–∞—î —Å–∫—Ä–∏—Ç–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä '
            '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "deeplink", –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –∑–≤–∏—á–∞–π–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏\n\n'
            '–î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É —Ü–µ –º–µ–Ω—é —Ç–∞–∫–æ–∂ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ—é "start"'
        )
        if user.caffe_id is not None:
            caffe = await caffe_db.get_caffe(user.caffe_id)
        else:
            caffe = None
        await msg.answer(text, reply_markup=barista_kb(caffe))
    else:
        await msg.answer('–ú–æ—ó –≤—ñ—Ç–∞–Ω–Ω—è—á–∫–∞ ü§ó', reply_markup=menu_kb)
    await state.finish()


async def my_code(msg: Message, user_db: UserRepo):
    user = await user_db.get_user(msg.from_user.id)
    qrcode = await generate_qrcode(msg.from_user.id)
    await msg.answer('–ü–æ–∫–∞–∂—ñ—Ç—å –∫–æ–¥ –±–∞—Ä–∏—Å—Ç—ñ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ—à–µ–∫ üòâ')
    await msg.answer_photo(photo=InputFile(qrcode))
    await msg.answer('–í–∞—à QR-–∫–æ–¥ ‚ù§')
    await msg.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å —Ñ—ñ—à–æ–∫ {user.chips}. –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ üòº', reply_markup=menu_kb)
    os.remove(qrcode)


async def back_button_handler(msg: Message, user_db: UserRepo, caffe_db: CaffeRepo,
                              state: FSMContext, config: Config):
    await start_cmd(msg, user_db, state, caffe_db, config)


async def add_barista_from_link(msg: Message, user_db: UserRepo, config: Config):
    if await user_db.get_user(msg.from_user.id) is None:
        await user_db.add(
            user_id=msg.from_user.id,
            full_name=msg.from_user.full_name,
            mention=msg.from_user.get_mention()
        )
    for chat_id in config.bot.admin_ids:
        await msg.bot.send_message(chat_id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {msg.from_user.get_mention()} –ø–æ–¥–∞–≤ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–∞–≤–∞ –±–∞—Ä–∏—Å—Ç–∏',
                                   reply_markup=bool_kb(msg.from_user.id))
    await msg.answer('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó', reply_markup=menu_kb)


def setup(dp: Dispatcher):
    dp.register_message_handler(add_barista_from_link, CommandStart(BARISTA_REGEX), state='*')
    dp.register_message_handler(start_cmd, CommandStart(), state='*')
    dp.register_message_handler(back_button_handler, text=Buttons.back.menu, state='*')
    dp.register_message_handler(my_code, text=Buttons.menu.my_qrcode, state='*')


