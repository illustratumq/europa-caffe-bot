import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import Message

from app.keyboards.reply.chips import chips_action_kb, chips_kb, chips_minus_kb
from app.keyboards.reply.menu import menu_kb
from app.misc.buttons import Buttons
from app.misc.enums import UserPermEnum
from app.services.repos import UserRepo, CaffeRepo
from app.states.admin import BaristaSG

USER_DEEPLINK_REGEX = re.compile('userId_[a-zA-z 0-9]*')


async def user_chips(msg: Message, user_db: UserRepo, deep_link: re.Match, state: FSMContext):
    user_id = int(deep_link.group().split('_')[-1])
    user = await user_db.get_user(user_id)
    if (await user_db.get_user(msg.from_user.id)).permission == UserPermEnum.ROOT:
        text = (
            f'–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è {user.mention}:\n\n'
            f'‚≠ê –ë–∞–ª–∞–Ω—Å —Ñ—ñ—à–æ–∫: {user.chips}\n'
        )
        msg.from_user.get_mention()
        await msg.answer(text, reply_markup=chips_action_kb)
        await BaristaSG.Action.set()
        await state.update_data(user_id=user_id)
        if (await user_db.get_user(msg.from_user.id)).caffe_id is None:
            deep_link = f"https://t.me/{(await msg.bot.me)['username']}?start={deep_link.group()}"
            await msg.answer(f'–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É!\n\n<b>–í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ —Å–≤—ñ–π –∑–∞–∫–ª–∞–¥</b>\n\n'
                             f'–©–æ–± –æ–±—Ä–∞—Ç–∏ –π–æ–≥–æ, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –º–µ–Ω—é –±–∞—Ä–∏—Å—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start\n'
                             f'–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∑–∞–∫–ª–∞–¥ –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ—à–µ–∫ '
                             f'–Ω–∞—Ç–∏—Å–Ω—É–≤–∞—à–∏ –Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ:\n\n<a href="{deep_link}>üëâ –¢–∏—Ü—å</a>">',
                             disable_web_page_preview=True)
    else:
        friend_id = msg.from_user.id
        friend = await user_db.get_user(friend_id)
        if user.user_id == msg.from_user.id:
            await msg.answer(
                '–í–∏ –≤—ñ–¥—Å–∫–∞–Ω—É–≤–∞–ª–∏ QR –∫–æ–¥. –ü–æ–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ –±–∞—Ä–∏—Å—Ç—ñ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è –∞–±–æ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ñ—ñ—à–æ–∫! üòâ',
                reply_markup=menu_kb
            )
        else:
            bonus = 1
            if friend is None:
                friend = await user_db.add(
                    user_id=friend_id,
                    full_name=msg.from_user.full_name,
                    mention=msg.from_user.get_mention()
                )
            else:
                await msg.answer('–ù–µ —Ö–∏—Ç—Ä—É–π üòº\n\n–¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ –±–æ–Ω—É—Å –∑–∞ –∑–∞–ø—Ä—à–µ–Ω–Ω—è!', reply_markup=menu_kb)
                return
            await user_db.update_user(friend.user_id, chips=friend.chips + bonus)
            await user_db.update_user(user.user_id, chips=user.chips + bonus)
            await msg.bot.send_message(user.user_id, f'–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å {bonus} —Ñ—ñ—à–æ–∫ '
                                                     f'–∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥—Ä—É–≥–∞ {friend.mention}! üòé')
            await msg.bot.send_message(friend.user_id, f'–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å {bonus} —Ñ—ñ—à–æ–∫ '
                                                       f'–≤—ñ–¥ –¥—Ä—É–≥–∞ {user.mention}! üòä')
        return


async def add_chips(msg: Message):
    await msg.answer('–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ—à–æ–∫ –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è', reply_markup=chips_kb)
    await BaristaSG.Increment.set()


async def del_chips(msg: Message):
    await msg.answer('–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ—à–æ–∫ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è', reply_markup=chips_minus_kb)
    await BaristaSG.Decrement.set()


async def increment_chips(msg: Message, user_db: UserRepo, caffe_db: CaffeRepo, state: FSMContext):
    user_id = int((await state.get_data())['user_id'])
    user = await user_db.get_user(user_id)
    barista = await user_db.get_user(msg.from_user.id)
    chips: str = msg.text
    if msg.text == Buttons.back.menu:
        await msg.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
        return
    if not chips.isnumeric():
        await msg.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ—à–æ–∫ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º')
        return
    elif int(chips) > 15:
        await msg.answer('–ù–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ 15 —Ñ—ñ—à–µ–∫')
        return
    if barista.caffe_id is not None:
        caffe = await caffe_db.get_caffe(barista.caffe_id)
        await caffe_db.update_caffe(caffe.caffe_id, chips=caffe.chips + int(chips))
    await user_db.update_user(user_id=user_id, chips=user.chips + int(chips))
    await msg.bot.send_message(chat_id=user_id, text=f'–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ñ—ñ—à–∫–∏ —É —Ä–æ–∑–º—ñ—Ä—ñ {chips}!\n\n–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏ üòâ')
    await msg.answer('–§—ñ—à–∫–∏ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=menu_kb)
    await state.finish()


async def decrement_chips(msg: Message, user_db: UserRepo, state: FSMContext, caffe_db: CaffeRepo):
    user_id = int((await state.get_data())['user_id'])
    user = await user_db.get_user(user_id)
    barista = await user_db.get_user(msg.from_user.id)
    chips: str = msg.text
    if msg.text == Buttons.back.menu:
        await msg.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=menu_kb)
        await state.finish()
        return
    if not chips.isnumeric():
        await msg.answer('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ—à–æ–∫ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º')
        return
    elif int(chips) > user.chips:
        await msg.answer(f'–ù–µ –º–æ–∂–Ω–∞ —Å–ø–∏—Å–∞—Ç–∏ {chips} —Ñ—ñ—à–æ–∫, –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ª–∏—à–µ {user.chips}')
        return
    if barista.caffe_id is not None:
        caffe = await caffe_db.get_caffe(barista.caffe_id)
        await caffe_db.update_caffe(caffe.caffe_id, chips=caffe.chips + int(chips))
    await user_db.update_user(user_id=user_id, chips=user.chips - int(chips))
    await msg.bot.send_message(chat_id=user_id, text=f'–í–∏ –≤–∏—Ç—Ä–∞—Ç–∏–ª–∏ —Ñ—ñ—à–∫–∏ —É —Ä–æ–∑–º—ñ—Ä—ñ {chips}!\n\n–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üòâ')
    await msg.answer('–§—ñ—à–∫–∏ —Å–ø–∏—Å–∞–Ω–æ! –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=menu_kb)
    await state.finish()


def setup(dp: Dispatcher):
    dp.register_message_handler(user_chips, CommandStart(USER_DEEPLINK_REGEX), state='*')
    dp.register_message_handler(add_chips, state=BaristaSG.Action, text=Buttons.chips.increment_chips)
    dp.register_message_handler(del_chips, state=BaristaSG.Action, text=Buttons.chips.decrement_chips)
    dp.register_message_handler(increment_chips, state=BaristaSG.Increment)
    dp.register_message_handler(decrement_chips, state=BaristaSG.Decrement)
